

SFbutton::SFbutton()
{
  inline_cpp[[
    fb = NULL;
  ]]
}

void SFbutton::create(int x, int y,int width, int height,&char labeli[])
{
   var int i=0;
   var char c0 = cast(char,0);
   while(labeli[i] != c0)
   {
      label[i] = labeli[i];
      i++;
   }
   label[i] = c0;
   inline_cpp[[
       fb = new Fl_Button(x,y,width,height,label._array);
       fb->callback(buttonCallback,this);
   ]]
}


void SFbutton::callback()
{}


SFinput::SFinput(){
  inline_cpp[[  fi=NULL;   ]]
}

void SFinput::create(int x, int y,int width, int height)
{
    inline_cpp[[
         fi = new Fl_Input(x,y,width,height);
    ]]
}

void SFinput::get(&String_16 value)
{
    value.clear();

    inline_cpp[[
      std::string vals = fi->value();
      char sp;
      value.ensureCapacity(&sp,vals.length());      
      for(int i=0; i < vals.length();i++) value.append(&sp,vals.at(i));
    ]]
}

SFbox::SFbox()
{
  inline_cpp[[
     mb = NULL;
  ]]

  //richte die Punkteliste ein
  punkteX = new int[100000];
  punkteY = new int[100000];
  farbe   = new int[100000];
  punkteGueltig = 0;

  //Labels
  labels = new SFlabel*[100];
  labelsGueltig = 0;

  //linien
  lineX = new int[1000];
  lineY = new int[1000];
  lineXend = new int[1000];
  lineYend = new int[1000];
  lineFarbe = new int[1000];
  linienGueltig = 0;
}

void SFbox::create(int x,int y,int w,int h)
{
   inline_cpp[[
      mb = new MyBox(this,x,y,w,h);
   ]]
}

//diese Methode wird letztlich von fltk-Framework gerufen
//um die Box zu zeichnen
void SFbox::draw()
{
   inline_cpp[[ 
      //loesche die Box
      //fl_draw_box(FL_FLAT_BOX,mb->x(),mb->y(),mb->w(),mb->h(),FL_WHITE); 
      fl_color(FL_WHITE);
      fl_rectf(mb->x(),mb->y(),mb->w(),mb->h());
      //setze die aktuelle Farbe fuer folgende fl_point() Aufrufe
      fl_color(FL_BLACK);

      fl_begin_line();
   ]]
   for(var int i=0; i < punkteGueltig; i++)
   {
      var int x = punkteX[i];
      var int y = punkteY[i];
      inline_cpp[[
         int yfenster = mb->y();
         int xfenster = mb->x();
         fl_color( farbe._theObject->_array[i] );
         fl_vertex( x + xfenster, y + yfenster );
         /*
         fl_point(x+xfenster   ,y+yfenster);
         fl_point(x+1+xfenster ,y+yfenster);
         fl_point(x+xfenster   ,y+1+yfenster);
         fl_point(x+1+xfenster ,y+1+yfenster);
         */
      ]]
   }
   inline_cpp[[ fl_end_line(); ]]
   punkteGueltig = 0;

   for(var int i=0; i < linienGueltig; i++)
   {
      var int x = lineX[i];
      var int y = lineY[i];
      var int xEnd = lineXend[i];
      var int yEnd = lineYend[i];
      inline_cpp[[ 
         fl_color( lineFarbe._theObject->_array[i] );
         fl_begin_line(); 
         int yfenster = mb->y();
         int xfenster = mb->x();
         fl_vertex( x + xfenster, y + yfenster );
         fl_vertex( xEnd + xfenster, yEnd + yfenster );
         fl_end_line(); 
      ]]
   }
   linienGueltig = 0;

   inline_cpp[[ fl_color(FL_BLACK); ]]
   for(var int i=0; i < labelsGueltig;i++)
   {
      var SFlabel* l= labels[i];
      var int x = l.x;
      var int y = l.y;
      inline_cpp[[
        fl_draw(l._theObject->strBuf._theObject->_array, mb->x() + x, mb->y() + y);
      ]] 
   }
   labelsGueltig = 0;


}

//fordere die Loeschung der Box an
void SFbox::loesche()
{
   punkteGueltig = 0;
   //inline_cpp[[mb->box(FL_NO_BOX);]]
   inline_cpp[[static_cast<Fl_Box*>(mb)->box(FL_NO_BOX);]]
}


//merke einen Punkt zum zeichnen in der Box vor
void SFbox::addPoint(int x, int y,int farbei)
{
   if(punkteGueltig == punkteX.sz)
   {
      var PrintfClass pfc;
      pfc.fstr("zu vielen Punkte in der SFbox").pr();
      return;
   }
   punkteX[punkteGueltig] = x;
   punkteY[punkteGueltig] = y;
   farbe[punkteGueltig]   = farbei;
   punkteGueltig++;
}

void SFbox::addLine(int x, int y, int xEnd, int yEnd, int farbei)
{
   if(linienGueltig < lineX.sz)
   {
     lineX[linienGueltig] = x;
     lineY[linienGueltig] = y;
     lineXend[linienGueltig] = xEnd;
     lineYend[linienGueltig] = yEnd;
     lineFarbe[linienGueltig] = farbei;
     linienGueltig++;
   }
   else
   { 
      var PrintfClass pfc;
      pfc.fstr("zu vielen Linien in der SFbox").pr();
      return;
   }
}

int SFbox::hoehe()
{
   var int ret;
   inline_cpp[[ ret = mb->h();]]
   return ret;
}

//das Neuzeichnen des Widgets anfordern
void SFbox::redraw()
{
  inline_cpp[[
    mb->redraw();
  ]] 
}

void SFbox::drawString(int x, int y,&String_16 str)
{
   if(labels.sz > labelsGueltig)
   {
       var *char nl[] = new char[str.length()+1];
       for(var int i=0; i < str.length(); i++){ nl[i] = str.getAt(i);}
       nl[str.length()] = '\0';
       labels[labelsGueltig] = new SFlabel;
       labels[labelsGueltig].x = x;
       labels[labelsGueltig].y = y;
       labels[labelsGueltig].strBuf = nl;
       labelsGueltig++; 

       /*
       inline_cpp[[ 
          fl_color(FL_BLACK);
          //mb->label(label._theObject->_array);
          //fl_draw(label._theObject->_array,mb->x()+x,mb->y()+y);
          fl_draw("dracula",mb->x()+x,mb->y()+y);
     
       ]]
       */
   }
   else
   {
     var PrintfClass pfc;
     pfc.fstr("too many Strings to display in SFbox").pr();
   }
}


int SFcolorCode::get_FL_BLACK  () { return  56;}
int SFcolorCode::get_FL_RED    () { return  88;}
int SFcolorCode::get_FL_GREEN  () { return  63;}
int SFcolorCode::get_FL_YELLOW () { return  95;}
int SFcolorCode::get_FL_BLUE   () { return  216;}
int SFcolorCode::get_FL_MAGENTA() { return  248;}
int SFcolorCode::get_FL_CYAN   () { return  223;}
int SFcolorCode::get_FL_DARK_RED() { return  72;}
int SFcolorCode::get_FL_DARK_GREEN   () { return  60;}
int SFcolorCode::get_FL_DARK_YELLOW  () { return  76;}
int SFcolorCode::get_FL_DARK_BLUE    () { return  136;}
int SFcolorCode::get_FL_DARK_MAGENTA () { return  152;}
int SFcolorCode::get_FL_DARK_CYAN    () { return  140;}
int SFcolorCode::get_FL_WHITE        () { return  255;}



int SFfont::getFontID_FL_HELVETICA_() { return 0;}
int SFfont::getFontID_FL_HELVETICA_BOLD_() { return 1;}
int SFfont::getFontID_FL_HELVETICA_ITALIC_() { return 2;}
int SFfont::getFontID_FL_HELVETICA_BOLD_ITALIC_() { return 3;}
int SFfont::getFontID_FL_COURIER_() { return 4;}
int SFfont::getFontID_FL_COURIER_BOLD_() { return 5;}
int SFfont::getFontID_FL_COURIER_ITALIC_() { return 6;}
int SFfont::getFontID_FL_COURIER_BOLD_ITALIC_() { return 7;}
int SFfont::getFontID_FL_TIMES_() { return 8;}
int SFfont::getFontID_FL_TIMES_BOLD_() { return 9;}
int SFfont::getFontID_FL_TIMES_ITALIC_() { return 10;}
int SFfont::getFontID_FL_TIMES_BOLD_ITALIC_() { return 11;}
int SFfont::getFontID_FL_SYMBOL_() { return 12;}
int SFfont::getFontID_FL_SCREEN_() { return 13;}
int SFfont::getFontID_FL_SCREEN_BOLD_() { return 14;}
int SFfont::getFontID_FL_ZAPF_DINGBATS_() { return 15;}
int SFfont::getFontID_FL_FREE_FONT_() { return 16;}
int SFfont::getFontID_FL_BOLD_() { return 1;}
int SFfont::getFontID_FL_ITALIC_() { return 2;}
int SFfont::getFontID_FL_BOLD_ITALIC_() { return 3;}

void SFfont::setFont(int font_id, int sizei)
{
   inline_cpp[[
      fl_font(font_id,sizei);
   ]]
}
