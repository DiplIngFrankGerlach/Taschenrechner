
SFAbstractWidget::SFAbstractWidget()
{
   widgetID = -1;
   label[0] = '\0';
}
 
int SFAbstractWidget::getWidgetID()
{
   return widgetID;
}


void SFAbstractWidget::getController(&SFController* controller_o)
{
    controller_o = controller;
}

void SFAbstractWidget::setWidgetID(int id)
{
   widgetID = id;
}

SFAbstractWidget::~SFAbstractWidget()
{
  controller = NULL;
  label[0] = '\0';
  widgetID = -1;
}

void SFController::buttonPressed(SFbutton* button){}
   
void SFController::choiceSelected(SFChoice* choice){}
   
void SFController::checkButtonStateChange(SFCheckButton* checkButton){}
   
void SFController::InputFieldEnterPressed(SFinput* input){}

void SFController::scrollbarValueChanged(SFScrollbar* ssb) {}



SFbutton::SFbutton()
{
  inline_cpp[[
    fb = NULL;
  ]]
}

void SFbutton::create(int x, int y,int width, int height,&char labeli[])
{
   StringUtil::copyCharArray2CharArray(labeli,label);
   inline_cpp[[
       fb = new Fl_Button(x,y,width,height,label._array);
       fb->callback(buttonCallback,this);
   ]]
}


void SFbutton::callback()
{
    if(controller != NULL)
    {
       var SFbutton* button;
       inline_cpp[[
          if(this->_rc == 0)//das trifft zum wenn das Objekt auf dem Stack allokiert wurde
          {
             this->_rc = 1;
          }
          button = this;
       ]]
       controller.buttonPressed(button);
    }
}

void SFbutton::setLabel(&char str[])
{
   StringUtil::copyCharArray2CharArray(str,label);
   
   inline_cpp[[ fb->label(label._array); ]]
}

void SFbutton::setRed()
{
   inline_cpp[[ 
        fb->color(FL_RED);
        fb->redraw();
   ]]
}

void SFbutton::setGreen()
{
   inline_cpp[[ 
        fb->color(FL_GREEN);
        fb->redraw();
   ]]
}

SFbutton::~SFbutton()
{
   inline_cpp[[ 
     delete fb;
     fb = NULL;
   ]]
}


SFinput::SFinput(SFController* controller_i)
{
  controller = controller_i;
  inline_cpp[[  fi=NULL;   ]]
}

void SFinput::create(int x, int y,int width, int height)
{
    inline_cpp[[
         fi = new MyInput(this,x,y,width,height,label._array);
    ]]
}

void SFinput::get(&String_16 value)
{
    value.clear();

    inline_cpp[[
      std::string vals = fi->value();
      char sp;
      value.ensureCapacity(&sp,vals.length());      
      for(int i=0; i < vals.length();i++) value.append(&sp,vals.at(i));
    ]]
}

SFinput::~SFinput()
{
  inline_cpp[[ 
    delete fi;
    fi = NULL;
  ]]
}




SFbox::SFbox()
{
  inline_cpp[[
     mb = NULL;
  ]]

  //richte die Punkteliste ein
  punkteX = new int[100000];
  punkteY = new int[100000];
  farbe   = new int[100000];
  punkteGueltig = 0;

  //Labels
  labels = new SFlabel*[100];
  labelsGueltig = 0;

  //linien
  lineX = new int[1000];
  lineY = new int[1000];
  lineXend = new int[1000];
  lineYend = new int[1000];
  lineFarbe = new int[1000];
  linienGueltig = 0;
}

void SFbox::create(int x,int y,int w,int h)
{
   inline_cpp[[
      mb = new MyBox(this,x,y,w,h);
   ]]
}

//diese Methode wird letztlich von fltk-Framework gerufen
//um die Box zu zeichnen
void SFbox::draw()
{
   inline_cpp[[ 
      //loesche die Box
      //fl_draw_box(FL_FLAT_BOX,mb->x(),mb->y(),mb->w(),mb->h(),FL_WHITE); 
      fl_color(FL_WHITE);
      fl_rectf(mb->x(),mb->y(),mb->w(),mb->h());
      //setze die aktuelle Farbe fuer folgende fl_point() Aufrufe
      fl_color(FL_BLACK);

      fl_begin_line();
   ]]
   for(var int i=0; i < punkteGueltig; i++)
   {
      var int x = punkteX[i];
      var int y = punkteY[i];
      inline_cpp[[
         int yfenster = mb->y();
         int xfenster = mb->x();
         fl_color( farbe._theObject->_array[i] );
         fl_vertex( x + xfenster, y + yfenster );
         /*
         fl_point(x+xfenster   ,y+yfenster);
         fl_point(x+1+xfenster ,y+yfenster);
         fl_point(x+xfenster   ,y+1+yfenster);
         fl_point(x+1+xfenster ,y+1+yfenster);
         */
      ]]
   }
   inline_cpp[[ fl_end_line(); ]]
   punkteGueltig = 0;

   for(var int i=0; i < linienGueltig; i++)
   {
      var int x = lineX[i];
      var int y = lineY[i];
      var int xEnd = lineXend[i];
      var int yEnd = lineYend[i];
      inline_cpp[[ 
         fl_color( lineFarbe._theObject->_array[i] );
         fl_begin_line(); 
         int yfenster = mb->y();
         int xfenster = mb->x();
         fl_vertex( x + xfenster, y + yfenster );
         fl_vertex( xEnd + xfenster, yEnd + yfenster );
         fl_end_line(); 
      ]]
   }
   linienGueltig = 0;

   inline_cpp[[ fl_color(FL_BLACK); ]]
   for(var int i=0; i < labelsGueltig;i++)
   {
      var SFlabel* l= labels[i];
      var int x = l.x;
      var int y = l.y;
      inline_cpp[[
        fl_draw(l._theObject->strBuf._theObject->_array, mb->x() + x, mb->y() + y);
      ]] 
   }
   labelsGueltig = 0;


}

//fordere die Loeschung der Box an
void SFbox::loesche()
{
   punkteGueltig = 0;
   //inline_cpp[[mb->box(FL_NO_BOX);]]
   inline_cpp[[static_cast<Fl_Box*>(mb)->box(FL_NO_BOX);]]
}


//merke einen Punkt zum zeichnen in der Box vor
void SFbox::addPoint(int x, int y,int farbei)
{
   if(punkteGueltig == punkteX.sz)
   {
      var PrintfClass pfc;
      pfc.fstr("zu vielen Punkte in der SFbox").pr();
      return;
   }
   punkteX[punkteGueltig] = x;
   punkteY[punkteGueltig] = y;
   farbe[punkteGueltig]   = farbei;
   punkteGueltig++;
}

void SFbox::addLine(int x, int y, int xEnd, int yEnd, int farbei)
{
   if(linienGueltig < lineX.sz)
   {
     lineX[linienGueltig] = x;
     lineY[linienGueltig] = y;
     lineXend[linienGueltig] = xEnd;
     lineYend[linienGueltig] = yEnd;
     lineFarbe[linienGueltig] = farbei;
     linienGueltig++;
   }
   else
   { 
      var PrintfClass pfc;
      pfc.fstr("zu vielen Linien in der SFbox").pr();
      return;
   }
}

int SFbox::hoehe()
{
   var int ret;
   inline_cpp[[ ret = mb->h();]]
   return ret;
}

//das Neuzeichnen des Widgets anfordern
void SFbox::redraw()
{
  inline_cpp[[
    mb->redraw();
  ]] 
}

void SFbox::drawString(int x, int y,&String_16 str)
{
   if(labels.sz > labelsGueltig)
   {
       var *char nl[] = new char[str.length()+1];
       for(var int i=0; i < str.length(); i++){ nl[i] = str.getAt(i);}
       nl[str.length()] = '\0';
       labels[labelsGueltig] = new SFlabel;
       labels[labelsGueltig].x = x;
       labels[labelsGueltig].y = y;
       labels[labelsGueltig].strBuf = nl;
       labelsGueltig++; 

       /*
       inline_cpp[[ 
          fl_color(FL_BLACK);
          //mb->label(label._theObject->_array);
          //fl_draw(label._theObject->_array,mb->x()+x,mb->y()+y);
          fl_draw("dracula",mb->x()+x,mb->y()+y);
     
       ]]
       */
   }
   else
   {
     var PrintfClass pfc;
     pfc.fstr("too many Strings to display in SFbox").pr();
   }
}

SFbox::~SFbox()
{
   inline_cpp[[
      delete mb;
      mb = NULL;
   ]]
}


int SFcolorCode::get_FL_BLACK  () { return  56;}
int SFcolorCode::get_FL_RED    () { return  88;}
int SFcolorCode::get_FL_GREEN  () { return  63;}
int SFcolorCode::get_FL_YELLOW () { return  95;}
int SFcolorCode::get_FL_BLUE   () { return  216;}
int SFcolorCode::get_FL_MAGENTA() { return  248;}
int SFcolorCode::get_FL_CYAN   () { return  223;}
int SFcolorCode::get_FL_DARK_RED() { return  72;}
int SFcolorCode::get_FL_DARK_GREEN   () { return  60;}
int SFcolorCode::get_FL_DARK_YELLOW  () { return  76;}
int SFcolorCode::get_FL_DARK_BLUE    () { return  136;}
int SFcolorCode::get_FL_DARK_MAGENTA () { return  152;}
int SFcolorCode::get_FL_DARK_CYAN    () { return  140;}
int SFcolorCode::get_FL_WHITE        () { return  255;}



int SFfont::getFontID_FL_HELVETICA_() { return 0;}
int SFfont::getFontID_FL_HELVETICA_BOLD_() { return 1;}
int SFfont::getFontID_FL_HELVETICA_ITALIC_() { return 2;}
int SFfont::getFontID_FL_HELVETICA_BOLD_ITALIC_() { return 3;}
int SFfont::getFontID_FL_COURIER_() { return 4;}
int SFfont::getFontID_FL_COURIER_BOLD_() { return 5;}
int SFfont::getFontID_FL_COURIER_ITALIC_() { return 6;}
int SFfont::getFontID_FL_COURIER_BOLD_ITALIC_() { return 7;}
int SFfont::getFontID_FL_TIMES_() { return 8;}
int SFfont::getFontID_FL_TIMES_BOLD_() { return 9;}
int SFfont::getFontID_FL_TIMES_ITALIC_() { return 10;}
int SFfont::getFontID_FL_TIMES_BOLD_ITALIC_() { return 11;}
int SFfont::getFontID_FL_SYMBOL_() { return 12;}
int SFfont::getFontID_FL_SCREEN_() { return 13;}
int SFfont::getFontID_FL_SCREEN_BOLD_() { return 14;}
int SFfont::getFontID_FL_ZAPF_DINGBATS_() { return 15;}
int SFfont::getFontID_FL_FREE_FONT_() { return 16;}
int SFfont::getFontID_FL_BOLD_() { return 1;}
int SFfont::getFontID_FL_ITALIC_() { return 2;}
int SFfont::getFontID_FL_BOLD_ITALIC_() { return 3;}

void SFfont::setFont(int font_id, int sizei)
{
   inline_cpp[[
      fl_font(font_id,sizei);
   ]]
}


///////////////////////////////////////////////////////////////////////
//Checkbutton

SFCheckButton::SFCheckButton(int x,int y, int width, int height,&char labeli[])
{
   StringUtil::copyCharArray2CharArray(labeli,label);
   
   inline_cpp[[
      check_button = new Fl_Check_Button(x,y,width,height, label._array); 
      check_button->callback(checkbox_callback,this);
   ]]
}

SFCheckButton::SFCheckButton(int x,int y, int width, int height,&char labeli[],SFController* controller_i)
{
   StringUtil::copyCharArray2CharArray(labeli,label);
   controller = controller_i;
   
   inline_cpp[[
      check_button = new Fl_Check_Button(x,y,width,height, label._array); 
      check_button->callback(checkbox_callback,this);
   ]]
}
   
void SFCheckButton::callback()
{
   var int checked;
    
   if(controller != NULL)
   {
      var SFCheckButton* CB;
      inline_cpp[[
          if(this->_rc == 0)//das trifft zum wenn das Objekt auf dem Stack allokiert wurde
          {
             this->_rc = 1;
          }
          CB = this;
      ]]
      controller.checkButtonStateChange(CB);
   }
}

int SFCheckButton::getState()
{
   var int ret;
   inline_cpp[[
      ret = check_button->value();
   ]]
   return ret;
}

SFCheckButton::~SFCheckButton()
{
   inline_cpp[[
      delete check_button;
      check_button = NULL;
   ]]
}

///////////////////////////////////////////////////////////////////////
//Choice, Pulldown Menue
SFChoice::SFChoice(int x,int y,int width, int height,SFController* controller_i)
{
   controller = controller_i;
   
   inline_cpp[[ 
     choice = new Fl_Choice(x, y, width, height);
     choice->callback(choice_callback,this); 
   ]]
}

void SFChoice::add(&char choiceLabel[])
{
     inline_cpp[[ 
        char* cp = new char[strlen(choiceLabel._array) + 1];
        strcpy(cp,choiceLabel._array);
        choiceStrings.push_back(cp);
        choice->add(cp); 
     ]]   
}

void SFChoice::callback(int choiceNr)
{
    //var PrintfClass pfc;
    //pfc.fstr("SFChoice::callback() choice: $").sa(choiceNr).pr();
    if(controller != NULL)
    {
       var SFChoice* auswahl;
       inline_cpp[[
          if(this->_rc == 0)//das trifft zum wenn das Objekt auf dem Stack allokiert wurde
          {
             this->_rc = 1;
          }
          auswahl = this;          
       ]]
       controller.choiceSelected(auswahl);
    }

}

int SFChoice::getSelected()
{
   var int ret;
   inline_cpp[[ ret = choice->value(); ]]
   return ret;
}
   
void SFChoice::getSelected(&String_16 selected)
{
    inline_cpp[[
        const char* selectedCP = choice->text();
        if( selectedCP != NULL)
        {
           int i=0;
           while( selectedCP[i] != '\\0')
           {
               char sp='X';
               selected.append(&sp,selectedCP[i]);
               i++;
           }
        }
    ]]
}

SFChoice::~SFChoice()
{
   inline_cpp[[
      delete choice;
      choice = NULL;
      //std::cout << "SFChoice::~SFChoice()" << std::endl;
      
      for (auto& str : choiceStrings) 
      {
        delete[] str;  
      }
      choiceStrings.clear();
   ]]
}


SFTextDisplay::SFTextDisplay(&char titlei[],int x, int y,int width, int height)
{
   StringUtil::copyCharArray2CharArray(titlei,label);
   inline_cpp[[  
      fl_display = new Fl_Text_Display(x,y,width,height,label._array); 
      
      fl_buffer = new Fl_Text_Buffer();
      
      //cout << "SFTextDisplay::SFTextDisplay() this=" << this <<  " fl_buffer 0: " << fl_buffer << endl;
      
      fl_display->buffer(fl_buffer);
   ]]
}
   
void SFTextDisplay::append(&String_16 zk)
{
inline_cpp[[
         //cout << "SFTextDisplay::append() this=" << this << " fl_buffer 1: " << fl_buffer << endl;
]]
   buffer = new char[zk.length()+1];
   var int stelle = 0;
   
   var int zkl = zk.length();
   var int bsm1 = buffer.sz - 1;
   while( stelle < zkl ) 
   {
      var int i=0;      
      while( (i < bsm1) && (stelle < zkl) )
      {
         buffer[i] = zk.getAt(stelle);
         i++;
         stelle++;
      }      
      buffer[i] = '\0';
      inline_cpp[[
         //cout << "fl_buffer 1: " << fl_buffer << endl;
         fl_buffer->insert(0,buffer._theObject->_array);
         fl_display->redraw();
      ]]      
   }
}

void SFTextDisplay::setText(&String_16 str)
{
   buffer = new char[str.length()+1];
   for(var int i=0; i < str.length(); i++)
   {
       buffer[i] = str.getAt(i);
   }
   buffer[str.length()] = '\0';
   inline_cpp[[
      fl_buffer->text(buffer._theObject->_array); 
   ]]
}


void SFTextDisplay::remove(int start, int end)
{
   inline_cpp[[
       //cout << "SFTextDisplay::remove() fl_buffer: " << fl_buffer << endl;
       fl_buffer->remove(start,end);
   ]]
}

int SFTextDisplay::length()
{
   var int ret;
   inline_cpp[[ 
      //cout << "SFTextDisplay::length() fl_buffer: " << fl_buffer << endl;
      
   ret = fl_buffer->length(); ]]
   
   return ret;
}

SFTextDisplay::~SFTextDisplay()
{
   inline_cpp[[
      delete fl_display;
      fl_display = NULL;
      
      delete fl_buffer;
      fl_buffer = NULL;
   ]]
}

SFSimpleText::SFSimpleText(SFController* controlleri,int x, int y, int width, int height,&char labeli[])
{
    controller = controlleri;
    StringUtil::copyCharArray2CharArray(labeli,label);
    inline_cpp[[        
        fl_box = new Fl_Box(x,y,width,height,""); //label._array);
        fl_box->label(label._array);
        fl_box->align(FL_ALIGN_LEFT | FL_ALIGN_INSIDE);
    ]]
}


void SFSimpleText::setText(&char str[])
{
   StringUtil::copyCharArray2CharArray(str,label);
   inline_cpp[[        
        fl_box->label(label._array);
        fl_box->redraw();
    ]]
}

void SFSimpleText::setText(&String_16 str)
{
   buffer = new char[str.length()+1];
   for(var int i=0; i < str.length(); i++) { buffer[i] = str.getAt(i);}
   buffer[str.length()] = '\0';
   inline_cpp[[        
        fl_box->label(buffer._theObject->_array);
        fl_box->redraw();
    ]]
}


void SFSimpleText::printGeo()
{
   inline_cpp[[ cout << "SFSimpleText x=" << fl_box->x() << " y=" << fl_box->y() << " w=" << fl_box->w() << " h="<< fl_box->h() << endl; ]]
}

SFSimpleText::~SFSimpleText()
{
   inline_cpp[[
       delete fl_box;
       fl_box = NULL;       
   ]]
}


void SFUtil::Alert(&char message[])
{
   inline_cpp[[ fl_alert(message._array);  ]]
}  


SFTable::SFTable(int x,int y, int width, int height,&char label[])
{
   inline_cpp[[
      fltkTable = new MyTable(x,y,width,height,label._array);
   ]]
} 

SFTable::~SFTable()
{
   inline_cpp[[
      delete fltkTable;
      fltkTable = NULL;
   ]]
}
   
///////////////////////////////////////////////////////////////
// Scrollbar
 
SFScrollbar::SFScrollbar(SFController* controlleri,int x,int y,int width, int height, int vertical)
{
    controller = controlleri;
    inline_cpp[[
        scrollbar = new Fl_Scrollbar(x,y, width,height);
        if( vertical == 1)
        { scrollbar->type(FL_VERTICAL); }
        else
        { scrollbar->type(FL_HORIZONTAL); };
        scrollbar->bounds(0, 20); // Adjust according to content length
        scrollbar->value(0);
        scrollbar->step(1);
        scrollbar->callback(scrollbar_callback,this);
    ]]
       
}

void SFScrollbar::callback(int wert)
{
    if(controller != NULL)
    {
       var SFScrollbar* ssb;
       inline_cpp[[
          if(this->_rc == 0)//das trifft zum wenn das Objekt auf dem Stack allokiert wurde
          {
             this->_rc = 1;
          }
          ssb = this;          
       ]]
       controller.scrollbarValueChanged(ssb);
    }
}

int SFScrollbar::value()
{
    var int v;
    inline_cpp[[
      v = scrollbar->value();
    ]]
    return v;
}

SFScrollbar::~SFScrollbar()
{
   inline_cpp[[
      delete scrollbar;
      scrollbar = NULL;
   ]]
}
