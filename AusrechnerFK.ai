





AusrechnerFK::AusrechnerFK(&String_16  dateiname)
{
   var SPRFile* eingabeDatei = new SPRFile(dateiname,1);
   if(eingabeDatei.systemHandle() < 1 )
   {
      var PrintfClass pfc;
      pfc.fstr("kann Datei nicht oeffnen").pr();
   }
   scanner = new Scanner(eingabeDatei);
   var Token t = scanner.nextToken();
}

AusrechnerFK::AusrechnerFK(String_16*  ausdruck)
{
   scanner = new Scanner(ausdruck);
   var Token t = scanner.nextToken();
}




//Diese Methode muss zur Ausrechnung des Ausdrucks gerufen werden
int AusrechnerFK::Addition(&double ergebnis)
{
   var PrintfClass pfc;
   //pfc.fstr("Addition").pr();

   var Token t;
   var String_16* tokVal;
   scanner.currentToken(t,tokVal);
   var double links; 
   if( this.Multiplication(links) != 1) { return -1; }
   scanner.currentToken(t,tokVal);
   var double summe = links;
   //pfc.fstr("summe=$").sa(summe).pr();
   while((t == T_PLUS) || (t==T_MINUS) )
   {
      var Token tAlt = t;
      scanner.nextToken();
      var double rechts; 

      if( this.Multiplication(rechts) != 1) { return -1; }

      scanner.currentToken(t,tokVal);
      if( tAlt == T_PLUS )
      {
         //pfc.fstr("$+$").sa(summe).sa(rechts).pr();
         summe = summe + rechts;
      }
      else { 
         //pfc.fstr("$-$").sa(summe).sa(rechts).pr();
        summe = summe - rechts; 
      }
   }
   ergebnis = summe;
   return 1;
}


int AusrechnerFK::Multiplication(&double ergebnis)
{
   var PrintfClass pfc;
   //pfc.fstr("Multiplication/Division").pr();

   var Token t;
   var String_16* tokVal;
   var double links;
   if(this.Primary(links) != 1) { return -1; }
   scanner.currentToken(t,tokVal);
   var double prod = links;
   while((t == T_MAL) || (t == T_DURCH) )
   {
      var Token tAlt = t;
      scanner.nextToken();
      var double rechts;
      if(this.Primary(rechts) != 1) { return -1; }
      scanner.currentToken(t,tokVal);
      if(tAlt == T_MAL)
      { 
        //pfc.fstr("$*$").sa(prod).sa(rechts).pr();
        prod = prod * rechts; }
      else
      { 
        //pfc.fstr("$/$").sa(prod).sa(rechts).pr();
        prod = prod / rechts; 
      }
 
   } 
   ergebnis = prod;
   return 1;
}

/*parse einen Literal, eine Konstante oder einen Funktionsaufruf */
int AusrechnerFK::Primary(&double ergebnis)
{  
   var PrintfClass pfc;
   //pfc.fstr("Primary").pr();

   var Token t;
   var String_16* tokVal;
   scanner.currentToken(t,tokVal);
   switch(t)
   {
     case T_KLAMMER_AUF:{ 
         //pfc.fstr(">(").pr();
         scanner.nextToken();
         var double ret;
	 if(this.Addition(ret) != 1) { return -1;}  
         scanner.currentToken(t,tokVal);
         //pfc.fstr("t:$").sa(t).pr(); 
         if(t == T_KLAMMER_ZU)
         { 
            scanner.nextToken();
         } 
         else
         {
            this.fehler(") erwartet");
         }
	 ergebnis = ret;
         return 1;
     }; break;
     case T_MINUS:{
        scanner.nextToken(); 
	if(this.Primary(ergebnis) != 1){ return -1;} 
	ergebnis = ergebnis * -1.0;
	return 1;
     }; break;
     case T_ZAHL:{ 
        scanner.currentToken(t,tokVal);
        ergebnis = tokVal.asDouble();
        scanner.nextToken(); 
        return 1;
     }; break;
     case T_WORT:{
        scanner.currentToken(t,tokVal);
        if((tokVal.equals("exp") == 1) ||
           (tokVal.equals("log") == 1)    )
        {
           var String_16 funktionsTyp;funktionsTyp.assign(tokVal);
           scanner.nextToken(); 
           scanner.currentToken(t,tokVal);
           if( t == T_KLAMMER_AUF )
           {
              scanner.nextToken(); 
              var double arg1;
	      if(this.Addition(arg1) != 1) { return -1;}
              scanner.currentToken(t,tokVal);
              if( t == T_KOMMA )
              {
                 scanner.nextToken(); 
                 scanner.currentToken(t,tokVal);
                 var double arg2;
		 if(this.Addition(arg2) != 1) { return -1; }
                 scanner.currentToken(t,tokVal);
                 if( t == T_KLAMMER_ZU )
                 {
                    scanner.nextToken(); 
                    scanner.currentToken(t,tokVal);
                    var Math m;
                    if(funktionsTyp.equals("exp")==1)
		    { 
		       ergebnis =  m.aHochB(arg1, arg2); 
		       return 1;
	            }
                    if(funktionsTyp.equals("log")==1)
                    { 
                       var double ret;
                       inline_cpp[[
                         ergebnis = ::log(arg2)/::log(arg1);
                       ]]
                       return 1; 
                    }
                 }
                 else { pfc.fstr("')' erwartet").pr(); return -1; }
              }
              else { pfc.fstr("',' erwartet").pr(); return -1; }
           }
           else { pfc.fstr("'(' erwartet").pr(); return -1; }
        }
        if((tokVal.equals("sinus") == 1)    || 
           (tokVal.equals("asinus") == 1)   || 
           (tokVal.equals("cosinus") == 1)  || 
           (tokVal.equals("acosinus") == 1) || 
           (tokVal.equals("tan") == 1)      || 
           (tokVal.equals("atan") == 1)     ||
           (tokVal.equals("sqrt") == 1)     ||
           (tokVal.equals("abs") == 1)      ||
           (tokVal.equals("fakultaet") == 1)||
           (tokVal.equals("pi") == 1)       ||
           (tokVal.equals("e") == 1)        ||
           (tokVal.equals("ln") == 1)           )
        {
           var String_16 funktionsTyp; funktionsTyp.assign(*tokVal);
           scanner.nextToken(); 
           scanner.currentToken(t,tokVal);
           if( t == T_KLAMMER_AUF )
           {
              scanner.nextToken(); 
              var double winkel;
	      if( this.Addition(winkel) != 1) { return -1; }
              scanner.currentToken(t,tokVal);
              if( t == T_KLAMMER_ZU )
              {
                 scanner.nextToken(); 
                 scanner.currentToken(t,tokVal);
                 var Math m;
                 var double ret;
                 if(funktionsTyp.equals("sinus")    == 1) { ergebnis = m.sinus(winkel); return 1;}
                 if(funktionsTyp.equals("asinus")   == 1) { ergebnis = m.asinus(winkel); return 1;}
                 if(funktionsTyp.equals("cosinus")  == 1) { ergebnis = m.cosinus(winkel); return 1;}
                 if(funktionsTyp.equals("acosinus") == 1) { ergebnis = m.acosinus(winkel); return 1;}
                 if(funktionsTyp.equals("tan")      == 1) { ergebnis = m.tangens(winkel); }return 1;
                 if(funktionsTyp.equals("acosinus") == 1) { ergebnis = m.atangens(winkel); return 1;}
                 if(funktionsTyp.equals("sqrt")     == 1) { ergebnis = m.wurzel(winkel); return 1;}
                 if(funktionsTyp.equals("ln")       == 1) 
                 { 
                    inline_cpp[[
                      ergebnis = ::log(winkel);//ja, "winkel" hier unpassend
                    ]]
                    return 1;
                 }
                 if(funktionsTyp.equals("abs") == 1) 
                 { 
                    inline_cpp[[
                      ergebnis = ::std::abs(winkel);//ja, "winkel" hier unpassend
                    ]]
                    return 1;
                 }
                 if(funktionsTyp.equals("fakultaet") == 1) 
                 { 
                    var int xi = cast(int,winkel);
                    ergebnis = 1.0;
                    for(var int i=2; i <= xi;i++)
                    { ergebnis = ergebnis * cast(double,i); }
                    return 1;
                 }
                 if(tokVal.equals("pi") == 1) { scanner.nextToken(); ergebnis = m.pi(); return 1; }
                 if(tokVal.equals("e") == 1)  { scanner.nextToken(); ergebnis = m.e(); return 1; }
              }
              else { pfc.fstr("')' erwartet").pr(); return -1; }
           }
           else { pfc.fstr("'(' erwartet").pr(); return -1; }
        }
        //Important Constants
        var Math m;
        var double variableValue = -1.0;
        if(variableList.search(*tokVal,variableValue) != 1)
        {
           //pfc.fstr("variable $ not found").sa(tokVal).pr();
           var String_16 meldung;
	   meldung.append("Funktion oder VAriable ");
	   meldung.append(tokVal);
	   meldung.append(" unbekannt");
	   var char meldungCA[256];
	   meldung.toCharArray(meldungCA);
           SFUtil::Alert(meldungCA);
           scanner.nextToken();
	   return -1;
        }
        scanner.nextToken(); 
        ergebnis = variableValue; 
	return 1;
     };break;
  
     default: { 
       var String_16 errm;
       errm.append("unerwarteter Token ");
       errm.append(tokVal);
       errm.append("in Primary()");
       pfc.fstr("$").sa(errm).pr();
       var SystemControl sc;
       sc.exit();  
     }; 
   }
   return -1;
}

void AusrechnerFK::fehler(char meldung[])
{
   var PrintfClass pfc;
   pfc.fstr("$").sa(meldung).pr();
   var SystemControl sc;
   sc.exit();
}

void AusrechnerFK::setVariableValue(&String_16 varName, double value)
{
   variableList.insert(varName,value);
}
